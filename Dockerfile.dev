# 效能優化的開發環境Dockerfile
# Task ID: 1 - Docker啟動系統效能優化
# 專注於快速構建和啟動時間 - 目標啟動時間 < 5分鐘

# 使用官方Python鏡像
FROM python:3.13-slim

# 建立非root用戶
RUN useradd --create-home --shell /bin/bash --uid 1000 app

# 設置工作目錄
WORKDIR /app

# 安裝系統依賴
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    tini \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# 先複製依賴文件以利用Docker層級快取
COPY pyproject.toml ./

# 安裝Python依賴
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --no-cache-dir --upgrade pip setuptools wheel \
    && pip install --no-cache-dir discord.py aiohttp asyncio-throttle psutil aiofiles pydantic python-dotenv aiosqlite pillow pyyaml

# 建立必要目錄並設置權限
RUN mkdir -p /app/data /app/logs /app/backups \
    && chown -R app:app /app

# 複製應用程式代碼（放在最後以最大化快取利用）
COPY --chown=app:app . .

# 切換到非root用戶
USER app

# 設置環境變數
ENV PYTHONPATH=/app \
    PYTHONUNBUFFERED=1 \
    ENVIRONMENT=development

# 簡化健康檢查 - 避免複雜的資料庫檢查在開發環境中
HEALTHCHECK --interval=30s --timeout=10s --start-period=15s --retries=3 \
    CMD python -c "import sys; print('Development container healthy -', sys.version_info[:2])" || exit 1

# 暴露健康檢查端口
EXPOSE 8000

# 使用tini作為init進程以改善信號處理
ENTRYPOINT ["tini", "--"]

# 優化的啟動命令
CMD ["python", "main.py"]