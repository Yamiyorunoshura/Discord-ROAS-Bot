# Docker Compose配置 - 生產環境
# Task ID: 1 - ROAS Bot v2.4.3 Docker啟動系統修復
# 優化版本：改善服務依賴、健康檢查、資源管理和安全性

services:
  discord-bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: discord-bot-prod
    environment:
      - DISCORD_TOKEN=${DISCORD_TOKEN}
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=INFO
      - DATABASE_URL=sqlite:///data/discord_data.db
      - MESSAGE_DATABASE_URL=sqlite:///data/message.db
      - REDIS_URL=redis://redis:6379/0
      - HEALTH_CHECK_PORT=8000
      - STARTUP_TIMEOUT=180
    volumes:
      - discord_data:/app/data
      - discord_logs:/app/logs
      - discord_backups:/app/backups
    restart: always
    networks:
      - discord-bot-network
    depends_on:
      redis:
        condition: service_healthy
        restart: true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health", "||", "exit", "1"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 180s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
      restart_policy:
        condition: any
        delay: 30s
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    labels:
      - "service.role=primary"
      - "service.tier=application"
      - "monitoring.scrape=true"
      - "backup.include=true"

  redis:
    image: redis:7-alpine
    container_name: discord-bot-redis-prod
    environment:
      - REDIS_MAXMEMORY=512mb
      - REDIS_MAXMEMORY_POLICY=allkeys-lru
    volumes:
      - redis_data:/data
      - ./monitoring/redis-prod.conf:/usr/local/etc/redis/redis.conf:ro
    restart: always
    networks:
      - discord-bot-network
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru --bind 0.0.0.0 --requirepass ${REDIS_PASSWORD:-defaultpass}
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "localhost", "-p", "6379", "-a", "${REDIS_PASSWORD:-defaultpass}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 5
        window: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"
    labels:
      - "service.role=dependency"
      - "service.tier=data"
      - "monitoring.scrape=false"
      - "backup.include=true"

  nginx:
    image: nginx:alpine
    container_name: discord-bot-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/ssl:/etc/nginx/ssl:ro
      - discord_docs:/usr/share/nginx/html/docs:ro
    restart: always
    networks:
      - discord-bot-network
    depends_on:
      - discord-bot
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  backup:
    image: alpine:latest
    container_name: discord-bot-backup
    volumes:
      - discord_data:/data:ro
      - discord_backups:/backups
      - ./deployment/backup.sh:/backup.sh:ro
    environment:
      - BACKUP_SCHEDULE=0 2 * * *  # 每日凌晨2點
    command: |
      sh -c "
        apk add --no-cache dcron sqlite &&
        echo '0 2 * * * /backup.sh' > /var/spool/cron/crontabs/root &&
        crond -f
      "
    restart: always
    networks:
      - discord-bot-network

volumes:
  discord_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/discord-bot/data
  discord_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/discord-bot/logs
  discord_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/discord-bot/backups
  discord_docs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/discord-bot/docs
  redis_data:
    driver: local

networks:
  discord-bot-network:
    driver: bridge