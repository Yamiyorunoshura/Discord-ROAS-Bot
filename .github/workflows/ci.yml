name: Discord Bot CI/CD Pipeline
# Task ID: T7 - 環境與依賴管理系統：CI流程遷移至uv

on:
  push:
    branches: [ main, restore/specs-2.4.1 ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.10'
  TESTING: true

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      matrix:
        test-type: [unit, integration, dpytest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        
    - name: Cache uv dependencies  
      uses: actions/cache@v3
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-
          
    - name: Install dependencies with uv
      run: |
        uv sync --extra dev --no-progress
        
    - name: Set up test environment
      run: |
        mkdir -p logs test_reports tests/dpytest
        export LOG_LEVEL=WARNING
        
    - name: Run unit tests
      if: matrix.test-type == 'unit'
      run: |
        uv run python -m pytest tests/unit/ -v \
          --cov=services --cov=panels --cov=core \
          --cov-report=xml --cov-report=html \
          --junit-xml=test_reports/unit-results.xml \
          -m "unit and not slow"
          
    - name: Run integration tests  
      if: matrix.test-type == 'integration'
      run: |
        uv run python -m pytest tests/integration/ -v \
          --junit-xml=test_reports/integration-results.xml \
          -m "integration and not slow" \
          --timeout=300
          
    - name: Run dpytest Discord tests
      if: matrix.test-type == 'dpytest'
      run: |
        # dpytest Discord測試現在已修復輔助函數問題
        uv run python -m pytest tests/dpytest/ -v \
          --junit-xml=test_reports/dpytest-results.xml \
          -m "dpytest" \
          --timeout=180 \
          --tb=short \
          --disable-warnings
      # 移除continue-on-error，因為問題已修復
      
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.test-type }}
        path: |
          test_reports/
          htmlcov/
          coverage.xml
          
    - name: Upload coverage to Codecov
      if: matrix.test-type == 'unit'
      uses: codecov/codecov-action@v3
      with:
        file: coverage.xml
        flags: unittests
        name: codecov-umbrella

  random-interaction-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        
    - name: Install dependencies with uv
      run: |
        uv sync --extra dev --no-progress
        
    - name: Run random interaction tests
      run: |
        # 設置固定種子進行可重現的隨機測試
        uv run python -m pytest tests/random/ -v \
          --junit-xml=test_reports/random-results.xml \
          -m "random_interaction" \
          --timeout=600 \
          --seed=12345 \
          --max-steps=50
      continue-on-error: true
      
    - name: Generate reproduction report
      if: failure()
      run: |
        # 生成失敗重現報告
        uv run python scripts/generate_failure_report.py \
          --test-results test_reports/random-results.xml \
          --output test_reports/reproduction-report.json
        
    - name: Upload random test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: random-test-results
        path: test_reports/

  stability-check:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        
    - name: Install dependencies with uv
      run: |
        uv sync --extra dev --no-progress
        
    - name: Run stability tests (3x repeat)
      run: |
        # 運行3次以檢測flaky測試
        for i in {1..3}; do
          echo "Stability run $i/3"
          uv run python -m pytest tests/dpytest/ tests/random/ \
            --junit-xml=test_reports/stability-run-$i.xml \
            -m "stability or random_interaction" \
            --timeout=300 || true
        done
        
    - name: Analyze stability
      run: |
        uv run python scripts/analyze_stability.py \
          --input-dir test_reports/ \
          --output test_reports/stability-analysis.json
      continue-on-error: true
        
    - name: Upload stability results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: stability-results
        path: test_reports/

  lint-and-format:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        
    - name: Install dependencies with uv
      run: |
        uv sync --extra dev --no-progress
        
    - name: Run Black formatter check
      run: |
        uv run black --check --diff .
        
    - name: Run isort import sorting check
      run: |
        uv run isort --check-only --diff .
        
    - name: Run Flake8 linting
      run: |
        uv run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        
    - name: Run MyPy type checking
      run: |
        uv run mypy services/ panels/ core/ --ignore-missing-imports
      continue-on-error: true

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        
    - name: Install dependencies with uv
      run: |
        uv sync --extra dev --no-progress
        uv add safety bandit --no-sync
        
    - name: Run dependency security check
      run: |
        uv run safety check
        
    - name: Run code security analysis
      run: |
        uv run bandit -r services/ panels/ core/ -f json -o security-report.json || true
        
    - name: Upload security results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-results
        path: security-report.json

  build-status:
    runs-on: ubuntu-latest
    needs: [test, lint-and-format, security-scan]
    if: always()
    
    steps:
    - name: Check build status
      run: |
        if [[ "${{ needs.test.result }}" == "success" && \
              "${{ needs.lint-and-format.result }}" == "success" && \
              "${{ needs.security-scan.result }}" == "success" ]]; then
          echo "✅ Build passed"
          exit 0
        else
          echo "❌ Build failed"
          echo "Test: ${{ needs.test.result }}"
          echo "Lint: ${{ needs.lint-and-format.result }}"
          echo "Security: ${{ needs.security-scan.result }}"
          exit 1
        fi