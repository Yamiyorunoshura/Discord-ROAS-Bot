# Docker Compose 開發環境覆蓋配置
# 使用方式: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up

version: '3.8'

services:
  # 開發環境主服務覆蓋
  discord-bot-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    environment:
      # 開發環境特定配置
      ENVIRONMENT: development
      LOG_LEVEL: DEBUG
      DEBUG: true
      RELOAD: true
      # 開發用 Discord Webhook (如果有)
      DEV_WEBHOOK_URL: ${DEV_WEBHOOK_URL:-}
    volumes:
      # 即時代碼同步
      - .:/app:cached
      - /app/.venv  # 排除虛擬環境
      - ./logs:/app/logs
      - ./dbs:/app/dbs
      - ./cache:/app/cache
    ports:
      - "8080:8080"   # API 端口
      - "5678:5678"   # 除錯端口 (debugpy)
      - "8888:8888"   # Jupyter 端口
    command: ["--development", "--reload", "--debug"]
    restart: "no"
    stdin_open: true
    tty: true
    # 開發環境不需要健康檢查
    healthcheck:
      disable: true

  # 開發資料庫 (SQLite Web 管理介面)
  sqlite-web:
    image: coleifer/sqlite-web
    container_name: discord-bot-sqlite-web
    ports:
      - "8081:8080"
    volumes:
      - ./dbs:/data
    command: ["/data/activity.db", "-H", "0.0.0.0"]
    networks:
      - discord-bot-network
    profiles:
      - dev

  # 開發用 MailHog (測試郵件服務)
  mailhog:
    image: mailhog/mailhog
    container_name: discord-bot-mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - discord-bot-network
    profiles:
      - dev

  # 熱重載文件服務器
  docs-server:
    image: nginx:alpine
    container_name: discord-bot-docs
    ports:
      - "3001:80"
    volumes:
      - ./docs:/usr/share/nginx/html:ro
      - ./docs/api:/usr/share/nginx/html/api:ro
    networks:
      - discord-bot-network
    profiles:
      - dev