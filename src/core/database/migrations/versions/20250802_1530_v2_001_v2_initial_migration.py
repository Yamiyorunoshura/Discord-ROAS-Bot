"""v2_initial_migration

Revision ID: v2_001
Revises:
Create Date: 2025-08-02 15:30:00.000000

"""

from __future__ import annotations

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "v2_001"
down_revision: str | None = None
branch_labels: str | tuple[str, ...] | None = None
depends_on: str | tuple[str, ...] | None = None

def upgrade() -> None:
    """Apply migration changes."""
    # ### commands auto generated by Alembic - please adjust! ###

    # Create guild_config table
    op.create_table(
        "guild_config",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("guild_id", sa.BIGINT(), nullable=False),
        sa.Column("settings", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_guild_config_guild_id", "guild_config", ["guild_id"], unique=False
    )
    op.create_index(
        "idx_guild_config_active", "guild_config", ["is_active"], unique=False
    )
    op.create_index(
        op.f("ix_guild_config_guild_id"), "guild_config", ["guild_id"], unique=True
    )

    # Create achievement_category table
    op.create_table(
        "achievement_category",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.Column("description", sa.String(length=200), nullable=False),
        sa.Column("display_order", sa.Integer(), nullable=False),
        sa.Column("icon_emoji", sa.String(length=10), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_achievement_category_name", "achievement_category", ["name"], unique=False
    )
    op.create_index(
        "idx_achievement_category_order",
        "achievement_category",
        ["display_order"],
        unique=False,
    )
    op.create_index(
        op.f("ix_achievement_category_name"),
        "achievement_category",
        ["name"],
        unique=True,
    )

    # Create currency_balance table
    op.create_table(
        "currency_balance",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("guild_id", sa.BIGINT(), nullable=False),
        sa.Column("user_id", sa.BIGINT(), nullable=False),
        sa.Column("balance", sa.BIGINT(), nullable=False),
        sa.Column("last_transaction_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("transaction_count", sa.Integer(), nullable=False),
        sa.Column(
            "extra_data", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["guild_id"],
            ["guild_config.guild_id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_currency_balance_guild_user",
        "currency_balance",
        ["guild_id", "user_id"],
        unique=True,
    )
    op.create_index(
        "idx_currency_balance_balance", "currency_balance", ["balance"], unique=False
    )
    op.create_index(
        "idx_currency_balance_last_transaction",
        "currency_balance",
        ["last_transaction_at"],
        unique=False,
    )

    # Create department table
    op.create_table(
        "department",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("guild_id", sa.BIGINT(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("json_data", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["guild_id"],
            ["guild_config.guild_id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_department_guild_name", "department", ["guild_id", "name"], unique=True
    )
    op.create_index("idx_department_active", "department", ["is_active"], unique=False)

    # Create achievement table
    op.create_table(
        "achievement",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("description", sa.String(length=500), nullable=False),
        sa.Column("category_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("type", sa.String(length=20), nullable=False),
        sa.Column("criteria", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("points", sa.Integer(), nullable=False),
        sa.Column("badge_url", sa.String(length=500), nullable=True),
        sa.Column("role_reward", sa.String(length=100), nullable=True),
        sa.Column("is_hidden", sa.Boolean(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["category_id"],
            ["achievement_category.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_achievement_category", "achievement", ["category_id"], unique=False
    )
    op.create_index("idx_achievement_type", "achievement", ["type"], unique=False)
    op.create_index(
        "idx_achievement_active", "achievement", ["is_active"], unique=False
    )

    # Create department_account table
    op.create_table(
        "department_account",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("department_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("user_id", sa.BIGINT(), nullable=False),
        sa.Column("role_name", sa.String(length=50), nullable=False),
        sa.Column(
            "permissions", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column(
            "appointed_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["department_id"],
            ["department.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_department_account_dept_user",
        "department_account",
        ["department_id", "user_id"],
        unique=True,
    )
    op.create_index(
        "idx_department_account_user", "department_account", ["user_id"], unique=False
    )
    op.create_index(
        "idx_department_account_active",
        "department_account",
        ["is_active"],
        unique=False,
    )

    # Create user_achievement table
    op.create_table(
        "user_achievement",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("user_id", sa.BIGINT(), nullable=False),
        sa.Column("achievement_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "earned_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("notified", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["achievement_id"],
            ["achievement.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_user_achievement_user_achievement",
        "user_achievement",
        ["user_id", "achievement_id"],
        unique=True,
    )
    op.create_index(
        "idx_user_achievement_user", "user_achievement", ["user_id"], unique=False
    )
    op.create_index(
        "idx_user_achievement_earned", "user_achievement", ["earned_at"], unique=False
    )

    # ### end Alembic commands ###

def downgrade() -> None:
    """Revert migration changes."""
    # ### commands auto generated by Alembic - please adjust! ###

    op.drop_table("user_achievement")
    op.drop_table("department_account")
    op.drop_table("achievement")
    op.drop_table("department")
    op.drop_table("currency_balance")
    op.drop_table("achievement_category")
    op.drop_table("guild_config")

    # ### end Alembic commands ###
